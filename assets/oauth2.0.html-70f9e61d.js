import{ab as o,G as p,H as i,E as n,S as a,N as e,ad as t,W as r}from"./framework-b31a425c.js";const l="/oauth/oauth.png",c="/oauth/password.jpg",u="/oauth/credentials.jpg",d="/oauth/implicit.jpg",h={},k=n("h1",{id:"_1-oauth2-0的基本介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-oauth2-0的基本介绍","aria-hidden":"true"},"#"),a(" 1. Oauth2.0的基本介绍")],-1),v={href:"https://www.rfc-editor.org/rfc/rfc6749",target:"_blank",rel:"noopener noreferrer"},m=t('<blockquote><p>举个例子: 平时我们登录新浪微博时，可以使用微信授权登录。登录时，并没有告诉新浪我们在微信的用户名密码，而是进行了授权</p></blockquote><h2 id="oauth2-0-流程和重要角色" tabindex="-1"><a class="header-anchor" href="#oauth2-0-流程和重要角色" aria-hidden="true">#</a> Oauth2.0 流程和重要角色</h2><p>Oauth2.0中有4个重要角色</p><ul><li>客户端(Client): 请求访问资源的服务器</li><li>资源拥有者（Resource Owner）: 通常是用户，或者应用程序</li><li>授权服务器(Authorization Server)：授权服务器（认证服务器），用于授权client访问资源和认证client有访问某个资源的权限</li><li>资源服务器(Resource Server): 存放资源的服务器</li></ul><p>有时候授权服务器和资源服务器是同一个服务，比如上述例子中的微信</p><h2 id="oauth2-0-的四种模式" tabindex="-1"><a class="header-anchor" href="#oauth2-0-的四种模式" aria-hidden="true">#</a> Oauth2.0 的四种模式</h2><ol><li>授权码模式</li><li>密码模式</li><li>客户端模式</li><li>简化模式</li></ol><h3 id="_1-授权码模式" tabindex="-1"><a class="header-anchor" href="#_1-授权码模式" aria-hidden="true">#</a> 1. 授权码模式</h3><p>授权码模式是最安全的一种模式，适用于有前后端的项目。前端授权获取到授权码(code),后端通过授权码访问授权服务器获取access_token.后续可以用access_token从资源服务器获取资源</p><figure><img src="'+l+'" alt="授权码模式" tabindex="0" loading="lazy"><figcaption>授权码模式</figcaption></figure><h3 id="_2-密码模式" tabindex="-1"><a class="header-anchor" href="#_2-密码模式" aria-hidden="true">#</a> 2. 密码模式</h3><p>如果高度信任某个应用，那么该client就可以用 你的 用户名和密码来申请access_token （令牌）</p><p><img src="'+c+'" alt="密码模式" loading="lazy"> 比如：在新浪的登录页面直接用微信的用户名和密码登录（假设哈）</p><ul><li>使用场景: 自己公司搭建的授权服务器</li></ul><h3 id="_3-客户端模式-client-credentials-grant" tabindex="-1"><a class="header-anchor" href="#_3-客户端模式-client-credentials-grant" aria-hidden="true">#</a> 3. 客户端模式（Client Credentials Grant）</h3><p>客户端用自己的名义而不是用户的名义向授权服务器申请令牌。</p><ul><li>适用于: 没有前端页面，只有纯后端的应用 <img src="'+u+'" alt="客户端模式" loading="lazy"></li></ul><h3 id="_4-简化模式-implicit" tabindex="-1"><a class="header-anchor" href="#_4-简化模式-implicit" aria-hidden="true">#</a> 4. 简化模式 （implicit）</h3><p>简化模式也叫隐藏式 有些服务没有后端服务，因此就不能使用上述的三种方式授权了。因此Oauth也允许向前端服务直接颁发令牌，没有授权码这一步，不过这种方式不是很安全 <img src="'+d+'" alt="简化模式" loading="lazy"></p><ul><li>适用场景: 只有前端服务，没有后端服务</li></ul><h1 id="spring-security-项目搭建" tabindex="-1"><a class="header-anchor" href="#spring-security-项目搭建" aria-hidden="true">#</a> Spring Security 项目搭建</h1>',21),b={href:"http://127.0.0.1:8081/user/getCurrentUser",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;authorities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;authority&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;details&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;remoteAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;sessionId&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;authenticated&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;principal&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;amber&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;authorities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;authority&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;accountNonExpired&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;accountNonLocked&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;credentialsNonExpired&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;enabled&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;credentials&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;amber&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="todo" tabindex="-1"><a class="header-anchor" href="#todo" aria-hidden="true">#</a> TODO</h1><p>TokenEndpoint</p><h1 id="scope-和-role的区别" tabindex="-1"><a class="header-anchor" href="#scope-和-role的区别" aria-hidden="true">#</a> Scope 和 Role的区别</h1><p>scope 基于客户端，而Role时基于用户。它们的作用都是访问控制。但是被授权给第三方访问的API一定可以被该用户访问，能被该用户访问的API则不一定可以被授权给第三方访问</p>`,5);function q(g,y){const s=r("ExternalLinkIcon");return p(),i("div",null,[k,n("p",null,[n("a",v,[a("Oauth2.0"),e(s)]),a(" （Open Authorization）是一个关于授权(authorization)的开放网络标准,允许用户授权访问他们存在另外服务提供者上的信息，并且不需要将用户名和密码提供给第三方应用。目前Oauth有两个版本1.0和2.0")]),m,n("p",null,[n("a",b,[a("http://127.0.0.1:8081/user/getCurrentUser"),e(s)])]),_])}const x=o(h,[["render",q],["__file","oauth2.0.html.vue"]]);export{x as default};
